package main

import (
	"encoding/json"
	"net/http"
	"time"

	"github.com/JoshuaSE-git/chirpy/internal/auth"
)

func (cfg *apiConfig) handlerLogin(w http.ResponseWriter, r *http.Request) {
	defaultExpiration := 1 * time.Hour
	type parameters struct {
		Password         string         `json:"password"`
		Email            string         `json:"email"`
		ExpiresInSeconds *time.Duration `json:"expires_in_seconds,omitempty"`
	}
	type response struct {
		User
		token string
	}

	params := parameters{}
	decoder := json.NewDecoder(r.Body)
	err := decoder.Decode(&params)
	if err != nil {
		respondWithError(w, http.StatusInternalServerError, "couldn't decode parameters", err)
		return
	}

	if params.ExpiresInSeconds == nil || *params.ExpiresInSeconds > defaultExpiration {
		params.ExpiresInSeconds = &defaultExpiration
	}

	user, err := cfg.db.GetUserByEmail(r.Context(), params.Email)
	if err != nil {
		respondWithError(w, http.StatusUnauthorized, "incorrect email or password", err)
		return
	}

	err = auth.CheckPassword(params.Password, user.HashedPassword)
	if err != nil {
		respondWithError(w, http.StatusUnauthorized, "incorrect email or password", err)
		return
	}

	token, err := auth.MakeJWT(user.ID, cfg.jwtSecret, *params.ExpiresInSeconds)
	if err != nil {
		respondWithError(w, http.StatusInternalServerError, "couldn't create jwt", err)
	}

	respondWithJSON(w, http.StatusOK, response{
		User: User{
			ID:        user.ID,
			CreatedAt: user.CreatedAt,
			UpdatedAt: user.UpdatedAt,
			Email:     user.Email,
		},
		token: "",
	})
}
